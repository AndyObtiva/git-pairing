#!/usr/bin/env ruby

require 'trollop'
require 'yaml/store'
require 'helper.rb'
require 'commands.rb'
require 'highline/import'

# config file is put into the user's home directory
pairs_conf = GitPairs::Helper.init(File.join(File.expand_path(ENV['HOME']),'.pairs'))

# Check if we are in a git repo
Trollop::die "Not in a git repo" unless system 'git status > /dev/null 2>/dev/null'

opts = Trollop::options do
  banner <<-EOS

Enables you to attribute git code commits to multiple authors

Usage:
    git pair <user-initials-1> <user-initials-2> [<user-initials-3> ...]
    git pair --add <user-initials-1> [<user-initials-2> ...]
    git pair --delete <user-initials-1> [<user-initials-2> ...]
    git pair --showk
    git pair --help

Options are mutually exclusive:
EOS
  opt :add, "Configures new pairing partners without modifying the existing git config", :type=>:strings
  opt :delete, "Delete pairing partners from the ~/.pairs config without modifying the existing git config", :type=>:strings
  opt :show, "Display the current ~/.pairs config"
end

too_many = (opts[:show_given] && opts[:add_given]) || (opts[:show_given] && opts[:delete_given]) || (opts[:add_given] && opts[:delete_given])
Trollop::die "Options are mutually exclusive - please enter only one" if too_many

if opts[:show_given]
  GitPairs::Helper.whoami
  puts "Pairs Config >"
  ap pairs_conf
elsif opts[:add_given]
  GitPairs::Commands.add(pairs_conf, opts[:add])
elsif opts[:delete_given]
  GitPairs::Commands.rm(pairs_conf, opts[:delete])
else
  GitPairs::Commands.set(pairs_conf, ARGV)
end

