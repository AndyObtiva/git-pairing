#!/usr/bin/env ruby

require 'trollop'
require 'yaml/store'
require 'helper.rb'
require 'commands.rb'
require 'highline/import'
require 'paint'
require 'pp'

opts = Trollop::options do
  banner <<-EOS

Enables you to attribute git code commits to multiple authors

Also see:
    git solo [-h | <user-initials>]
    git [who | whoami]

Usage:
    git pair <user-initials-1> <user-initials-2> [<user-initials-3> ...]
    git pair [-a | --add] <user-initials-1> [<user-initials-2> ...]
    git pair [-d | --delete] <user-initials-1> [<user-initials-2> ...]
    git pair [-s | --show]
    git pair -h

Options are mutually exclusive:

EOS
  opt :add, "Configures new pairing partners without modifying the existing git config", :type=>:strings
  opt :delete, "Delete pairing partners from the ~/.pairs config without modifying the existing git config", :type=>:strings
  opt :show, "Display the current ~/.pairs config"
end

# config file is put into the user's home directory
path_to_conf = File.join(File.expand_path(ENV['HOME']),'.pairs')
pairs_conf = GitPairs::Helper.init(path_to_conf)


too_many = (opts[:show_given] && opts[:add_given]) || (opts[:show_given] && opts[:delete_given]) || (opts[:add_given] && opts[:delete_given])
Trollop::die "Options are mutually exclusive - please enter only one" if too_many

if opts[:show_given]
  GitPairs::Helper.whoami
  puts "Pairs Config >"
  puts ""
  pp pairs_conf
  puts ""
elsif opts[:add_given]
  GitPairs::Commands.add(pairs_conf, path_to_conf, opts[:add])
  puts "Pairs Config >"
  puts ""
  pp pairs_conf
  puts ""
elsif opts[:delete_given]
  GitPairs::Commands.rm(pairs_conf, path_to_conf, opts[:delete])
  puts "Pairs Config >"
  puts ""
  pp pairs_conf
  puts ""
else
  GitPairs::Commands.set(pairs_conf, path_to_conf, ARGV.uniq)
  GitPairs::Helper.whoami
end

